<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="ColumnTOTPCode" xml:space="preserve">
    <value>TOTP</value>
  </data>
  <data name="ColumnTOTPStatus" xml:space="preserve">
    <value>TOTP Status</value>
  </data>
  <data name="ConnectionFailed" xml:space="preserve">
    <value>Connection failed!</value>
  </data>
  <data name="CopyTOTP" xml:space="preserve">
    <value>Copy TOTP</value>
  </data>
  <data name="DatabaseIsLocked" xml:space="preserve">
    <value>Database is locked!</value>
  </data>
  <data name="DatabaseIsNotOpen" xml:space="preserve">
    <value>Database is not open!</value>
  </data>
  <data name="ErrorBadSeed" xml:space="preserve">
    <value>Error, bad seed!</value>
  </data>
  <data name="ErrorBadSettings" xml:space="preserve">
    <value>Error, bad settings!</value>
  </data>
  <data name="ErrorNoSeed" xml:space="preserve">
    <value>Error, no seed!</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="Locked" xml:space="preserve">
    <value>Locked</value>
  </data>
  <data name="NoDatabaseIsOpened" xml:space="preserve">
    <value>No database is opened!</value>
  </data>
  <data name="NoTOTPEntriesFound" xml:space="preserve">
    <value>No TOTP Entries found</value>
  </data>
  <data name="NoTOTPSeedFound" xml:space="preserve">
    <value>No TOTP Seed found!</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="SettingsAskResetDefaultValues" xml:space="preserve">
    <value>Are you sure you want to reset all the settings to their default values?</value>
  </data>
  <data name="SettingsCurrentDatabaseLocked" xml:space="preserve">
    <value>The currently opened database is locked! This function only works with an unlocked database.</value>
  </data>
  <data name="SettingsDefaultValuesRestored" xml:space="preserve">
    <value>Settings restored to defaults!</value>
  </data>
  <data name="SettingsEnableFieldRename" xml:space="preserve">
    <value>Please start by enabling "Field rename".</value>
  </data>
  <data name="SettingsErrors" xml:space="preserve">
    <value>Errors detected!</value>
  </data>
  <data name="SettingsInvalidCharacter" xml:space="preserve">
    <value>Invalid character!</value>
  </data>
  <data name="SettingsInvalidNameSeed" xml:space="preserve">
    <value>Invalid name! Must be different than the Seed String.</value>
  </data>
  <data name="SettingsInvalidNameSetting" xml:space="preserve">
    <value>Invalid name! Must be different than the Setting String.</value>
  </data>
  <data name="SettingsNoInternetDetected" xml:space="preserve">
    <value>Warning, no internet connection detected!{0}{0}You will not be able to add any server until you are connected.</value>
    <comment>{0} must be Environment.NewLine</comment>
  </data>
  <data name="SettingsOpenDatabaseRequired" xml:space="preserve">
    <value>You must have an opened database in order to use this function.</value>
  </data>
  <data name="Setup" xml:space="preserve">
    <value>Setup</value>
  </data>
  <data name="SetupDelete" xml:space="preserve">
    <value>Deletes the current TOTP settings.</value>
  </data>
  <data name="SetupFinish" xml:space="preserve">
    <value>Closes the wizard.</value>
  </data>
  <data name="SetupInterval" xml:space="preserve">
    <value>Interval must be between{0}nand 180 inclusively!</value>
    <comment>{0} must be Environment.NewLine</comment>
  </data>
  <data name="SetupInvalidCharacter" xml:space="preserve">
    <value>Invalid character</value>
  </data>
  <data name="SetupInvalidPadding" xml:space="preserve">
    <value>Padding (=) can only appear at the end!</value>
  </data>
  <data name="SetupInvalidUrl" xml:space="preserve">
    <value>Invalid URL!</value>
  </data>
  <data name="SetupLengthMandatory" xml:space="preserve">
    <value>Length is mandatory!</value>
  </data>
  <data name="SetupMessageAskDeleteCurrentEntry" xml:space="preserve">
    <value>Are you sure you want to delete the current entry's TOTP settings?</value>
  </data>
  <data name="SetupSeedCantBeEmpty" xml:space="preserve">
    <value>Seed cannot be empty!</value>
  </data>
  <data name="SetupTOTP" xml:space="preserve">
    <value>Setup TOTP</value>
  </data>
  <data name="ShowQR" xml:space="preserve">
    <value>Show QR</value>
  </data>
  <data name="SwitchTo" xml:space="preserve">
    <value>Switch to {0}</value>
    <comment>{0} is a database name</comment>
  </data>
  <data name="TcConnectionFailed" xml:space="preserve">
    <value>The connection to the server failed.</value>
  </data>
  <data name="TcPleaseWaitVerifying" xml:space="preserve">
    <value>Please wait, verifying...</value>
  </data>
  <data name="TcSucces" xml:space="preserve">
    <value>Success!</value>
  </data>
  <data name="TcUrlExists" xml:space="preserve">
    <value>Existing URL!</value>
  </data>
  <data name="TcUrlInvalid" xml:space="preserve">
    <value>Invalid URL!</value>
  </data>
  <data name="TcUrlMustContainHttp" xml:space="preserve">
    <value>URL must contain "http"!</value>
  </data>
  <data name="TcVerificationCancelled" xml:space="preserve">
    <value>Verification cancelled!</value>
  </data>
  <data name="TimeCorrection" xml:space="preserve">
    <value>Time Correction</value>
  </data>
  <data name="TOTP" xml:space="preserve">
    <value>TOTP</value>
  </data>
  <data name="TOTPEnabled" xml:space="preserve">
    <value>TOTP Enabled</value>
  </data>
  <data name="TOTPSeed" xml:space="preserve">
    <value>TOTP Seed</value>
  </data>
  <data name="TOTPSettings" xml:space="preserve">
    <value>TOTP Settings</value>
  </data>
  <data name="TrayTOTPPlugin" xml:space="preserve">
    <value>Tray TOTP Plugin</value>
  </data>
  <data name="WarningBadURL" xml:space="preserve">
    <value>Warning, bad URL?</value>
  </data>
</root>